// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Clear
#pragma kernel Cull

#define COMPUTESHADER

#include "UnityCG.cginc"
#include "Procedural.cginc"


#pragma enable_d3d11_debug_symbols

struct ClusterData
{
    float3 position;
    float3 extent;
    float displayDistanceMin;
    float displayDistanceMax;
    uint drawIndex;
    uint clusterOffset;
};

RWStructuredBuffer<ClusterData> _ClusterBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _ResultBuffer;

Texture2D<half> _HizDepthTex;
SamplerState sampler_HizDepthTex;

float4 _Planes[PLANECOUNT];
float3 _FrustumMinPoint;
float3 _FrustumMaxPoint;
float3 _CameraPos;
uint _MaxCount;
float4x4 _LastVp;
float4 _HizScreenRes;

float PlaneTest(ClusterData info){
    float3 position = info.position;
    float3 extent = info.extent;
    float3 minPos = position - extent;
    float3 maxPos = position + extent;
    float outOfRange = dot(_FrustumMinPoint > maxPos, 1) + dot(_FrustumMaxPoint < minPos, 1);
    if(outOfRange > 0.5) return 0;
    [unroll]
    for(uint i = 0; i < 6; ++i)
    {
        float4 plane = _Planes[i];
        float3 absNormal = abs(plane.xyz);
        if((dot(position, plane.xyz) - dot(absNormal, extent)) > -plane.w)
        {
            return 0;
        }
    }
    return 1;
}

static const float3 aggressiveExtentArray[8] =
{
    float3(1, 1, 1),
    float3(1, 1, -1),
    float3(1, -1, 1),
    float3(1, -1, -1),
    float3(-1, 1, 1),
    float3(-1, 1, -1),
    float3(-1, -1, 1),
    float3(-1, -1, -1)
};

float OcclusionTest(ClusterData info, float4x4 vpMat)
{
    #ifdef UNITY_REVERSED_Z
        float minZ = 0;
    #else
        float minZ = 1;
    #endif
    float2 maxXY = 0; float2 minXY = 1;
    for(uint i = 0; i < 8; ++i)
    {
        float3 boxCorner = info.position + info.extent * aggressiveExtentArray[i]; 
        float4 clipPos = mul(vpMat, float4(boxCorner, 1));
        clipPos /= clipPos.w;
        minXY = min(clipPos.xy, minXY);
        maxXY = max(clipPos.xy, maxXY);
        #ifdef UNITY_REVERSED_Z
            minZ = max(minZ, clipPos.z);
        #else
            minZ = min(minZ, clipPos.z);
        #endif
    }
    
    float4 boxUVs = float4(minXY, maxXY);
    boxUVs = saturate(boxUVs * 0.5 + 0.5);
    float2 size = (boxUVs.zw - boxUVs.xy) * _HizScreenRes.xy;
    float mip = log2(max(size.x, size.y));
    // 离得太近，或者物体太大，占了满屏
    if(mip > _HizScreenRes.z)
    {
        return 1;
    }
    
    mip = ceil(mip);
    mip = min(mip, _HizScreenRes.w);
    float  level_lower = max(mip - 1, 0);
    float2 scale = exp2(-level_lower) * _HizScreenRes.xy;
    float2 a = floor(boxUVs.xy*scale);
    float2 b = ceil(boxUVs.zw*scale);
    float2 dims = b - a;

    // Use the lower level if we only touch <= 2 texels in both dimensions
    if (dims.x <= 2 && dims.y <= 2)
        mip = level_lower;

#if UNITY_UV_STARTS_AT_TOP
    boxUVs = float4(boxUVs.x, 1-boxUVs.y, boxUVs.z, 1-boxUVs.w);
#endif

    float4 depth = float4(_HizDepthTex.SampleLevel(sampler_HizDepthTex, boxUVs.xy, mip),
                         _HizDepthTex.SampleLevel(sampler_HizDepthTex, boxUVs.zy, mip),
                         _HizDepthTex.SampleLevel(sampler_HizDepthTex, boxUVs.xw, mip),
                         _HizDepthTex.SampleLevel(sampler_HizDepthTex, boxUVs.zw, mip)
    );
    
    #ifdef UNITY_REVERSED_Z
        depth.xy = min(depth.xy, depth.zw);
        depth.x = min(depth.x, depth.y);
        return minZ >= depth.x;
    #else
        depth.xy = max(depth.xy, depth.zw);
        depth.x = max(depth.x, depth.y);
        return minZ <= depth.x;
    #endif
}

[numthreads(64,1,1)]
void Clear(uint id : SV_DISPATCHTHREADID)
{
    if (id > _MaxCount)
        return;
    
    _ArgsBuffer[id*5+1] = 0;
}

[numthreads(64, 1, 1)]
void Cull(uint id : SV_DISPATCHTHREADID)
{
    if(id >= _MaxCount) return; 
    ClusterData currentObject = _ClusterBuffer[id];
    float dis = distance(_CameraPos, currentObject.position);
    if(dis < currentObject.displayDistanceMax && dis >= currentObject.displayDistanceMin && PlaneTest(currentObject) > 0.5)
    {
        uint currentIndex;
        [branch]
        if(OcclusionTest(currentObject, _LastVp) > 0.5)
        {
            InterlockedAdd(_ArgsBuffer[currentObject.drawIndex * 5 + 1], 1, currentIndex);
            _ResultBuffer[currentObject.clusterOffset + currentIndex] = id-currentObject.clusterOffset;
        }
    }
}